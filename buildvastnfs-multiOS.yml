---
# Playbook to download, build, and install the latest version of the VAST NFS driver
# Supports both Ubuntu and CentOS-based distributions
- name: Install VAST NFS Driver (Supports Ubuntu & CentOS)
  hosts: clients
  become: yes
  gather_facts: yes  # This ensures Ansible gathers system facts like OS distribution
  vars:
    download_script_url: "https://vast-nfs.s3.amazonaws.com/download.sh"
    output_log: "/tmp/cloud-init-out.txt"

  tasks:
    ###==========================  Gather System Facts  ===========================###
    #- name: Gather all facts (for distribution detection)
    #  ansible.builtin.setup:
    - name: Set OS family flags
      ansible.builtin.set_fact:
        is_redhat: "{{ ansible_facts['distribution'] in ['RedHat', 'CentOS', 'Rocky', 'AlmaLinux'] }}"
        is_ubuntu: "{{ ansible_facts['distribution'] == 'Ubuntu' }}"

    - name: Set package extension based on OS
      ansible.builtin.set_fact:
        package_ext: "{{ 'rpm' if is_redhat else 'deb' }}"

    # Debugging task to display detected OS
    - name: Debug OS detection
      debug:
        msg: "OS Detected: {{ ansible_facts['distribution'] }} | is_redhat: {{ is_redhat }} | is_ubuntu: {{ is_ubuntu }} | Package: {{ package_ext }}"

    ###==========================  Start main tasks  ==============================###
    # Ensure /root directory exists
    - name: Ensure /root directory exists
      ansible.builtin.file:
        path: /root
        state: directory

    # Run the official download script to download the tarball
    - name: Run the official download script (downloads tarball)
      ansible.builtin.shell: |
        curl -sSf {{ download_script_url }} | bash -s --
      register: download_output
      args:
        chdir: /root
        executable: /bin/bash
    
    ###--- Debug - comment if not needed
    # Debug task to display raw download script output
    - name: DEBUG - Dump raw download script output
      debug:
        var: download_output.stdout

    # Debug task to display any stderr from the download script
    - name: DEBUG - Dump download script stderr (if any)
      debug:
        var: download_output.stderr
    ###--- End Debug

    # If script does not return the downloaded filename, fallback to finding the tarball directly
    - name: Find the downloaded tarball directly
      ansible.builtin.find:
        paths: /root
        patterns: "vastnfs-*.tar.xz"
        recurse: no
      register: found_tarballs
      when: downloaded_filename is not defined or downloaded_filename == ''

    # Set tarball and version directory names based on the found file
    - name: Set tarball and version directory names based on found file
      set_fact:
        nfs_tarball: "{{ found_tarballs.files[0].path | basename }}"  # Tarball filename
        nfs_version_dir: "{{ found_tarballs.files[0].path | basename | regex_replace('\\.tar\\.xz$', '') }}"  # Version directory from tarball
      when: found_tarballs.files | length > 0

    # If no tarball was found, notify and exit
    - name: Fail if no tarball is found
      ansible.builtin.fail:
        msg: "No VAST NFS tarball found in the expected location."
      when: found_tarballs.files | length == 0

    # Remove existing extracted folder if present
    - name: Remove existing extracted folder if present
      ansible.builtin.file:
        path: "/root/{{ nfs_version_dir }}"
        state: absent

    # Extract the downloaded tarball to the /root directory
    - name: Extract the tarball
      ansible.builtin.unarchive:
        src: "/root/{{ nfs_tarball }}"
        dest: /root
        remote_src: yes
      when: nfs_tarball is defined and found_tarballs.files | length > 0

    # Remove the tarball after extraction to save space
    - name: Remove existing tarball after extraction
      ansible.builtin.file:
        path: "/root/{{ nfs_tarball }}"
        state: absent
      when: nfs_tarball is defined

    # Log preparation details for the build process
    - name: Log build.sh preparation
      ansible.builtin.shell: |
        echo "Preparing to build in {{ nfs_version_dir }}" >> {{ output_log }}
        ls -la "/root/{{ nfs_version_dir }}" >> {{ output_log }}
      args:
        executable: /bin/bash

    # Check if the build output directory already exists
    - name: Check if build output already exists
      ansible.builtin.stat:
        path: "/root/{{ nfs_version_dir }}/dist"
      register: dist_check

    # Run the build script only if the dist folder does not exist (build the driver)
    - name: Run build.sh with 'bin' argument and log output
      ansible.builtin.shell: |
        ./build.sh bin >> {{ output_log }} 2>&1
        echo "build.sh completed with exit code $?" >> {{ output_log }}
      args:
        chdir: "/root/{{ nfs_version_dir }}"
        executable: /bin/bash
      when: not dist_check.stat.exists

    - name: Find the generated VAST NFS package
      ansible.builtin.find:
        paths: "/root/{{ nfs_version_dir }}/dist"
        patterns: "vastnfs-*"
        use_regex: false
        recurse: no
      register: found_pkgs

    # Debug task to display the path of the found package
    - name: Debug - Show found package path
      ansible.builtin.debug:
        var: found_pkgs.files[0].path
      when: found_pkgs.files | length > 0


    ###============================  Install  =================================###
    ###--- dnf/yum based install
    # Install the VAST NFS RPM package for RedHat-based distributions
    - name: Install VAST NFS RPM (RedHat-based)
      ansible.builtin.yum:
        name: "{{ found_pkgs.files[0].path }}"
        state: present
        disable_gpg_check: true
      when: is_redhat and found_pkgs.files | length > 0

    # Regenerate initramfs after successful RPM install (RedHat-based)
    - name: Run dracut -f to regenerate initramfs (RedHat-based)
      ansible.builtin.shell: dracut -f
      when: is_redhat and found_pkgs.files | length > 0

    ###--- deb based install
    # Install the VAST NFS DEB package for Ubuntu-based distributions
    - name: Install VAST NFS DEB (Ubuntu-based)
      ansible.builtin.apt:
        deb: "{{ found_pkgs.files[0].path }}"
        state: present
      when: is_ubuntu and found_pkgs.files | length > 0

    # Regenerate initramfs after successful DEB install (Ubuntu-based)
    - name: Run update-initramfs to regenerate initramfs (Ubuntu-based)
      ansible.builtin.shell: update-initramfs -u -k $(uname -r)
      when: is_ubuntu and found_pkgs.files | length > 0


    ###============================  Reboot  =================================###
    # Reboot the host to activate the VAST NFS driver
    - name: Reboot the host to activate VAST NFS driver
      ansible.builtin.reboot:
        reboot_timeout: 600

    # Verify that the kernel module rpcrdma.ko was installed by a valid RPM package
    - name: Verify rpcrdma.ko was installed by a valid RPM
      ansible.builtin.shell: |
        rpm -qif /lib/modules/$(uname -r)/extra/vastnfs/bundle/net/sunrpc/xprtrdma/rpcrdma.ko
      register: rpm_verify
      ignore_errors: true

    # Output the result of RPM verification
    - name: Output RPM verification result
      ansible.builtin.debug:
        var: rpm_verify.stdout
